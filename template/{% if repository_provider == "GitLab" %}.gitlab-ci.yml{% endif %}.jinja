stages:
  - prepare
  - test
  - build
  - publish

default:
  cache:
    - &poetry-cache
      key:
        prefix: "poetry"
        files:
          - poetry.lock
          - .gitlab-ci.yml
      paths:
        - .venv
        - .pip
      policy: pull

.poetry-install: &poetry-install
  - pip3 install -q --cache-dir=.pip poetry
  - poetry config virtualenvs.in-project true
  - poetry install --no-root --no-interaction --no-ansi

poetry_cache:
  stage: prepare
  image: $IMAGE_PYTHON
  only:
    changes:
      - "**/*.py"
      - .gitlab-ci.yml
      - .pylintrc
      - pyproject.toml
      - poetry.lock
  tags:
    - $RUNNER_TEST
  cache:
    - <<: *poetry-cache
      policy: pull-push
  script:
    - *poetry-install

pylint:
  stage: test
  image: $IMAGE_PYTHON
  only:
    changes:
      - .gitlab-ci.yml
      - .pylintrc
      - "**/*.py"
  cache: [*poetry-cache]
  tags:
    - $RUNNER_TEST
  script:
    - *poetry-install
    - poetry run poe lint

mypy:
  stage: test
  image: $IMAGE_PYTHON
  only:
    changes:
      - .gitlab-ci.yml
      - pyproject.toml
      - "**/*.py"
  cache: [*poetry-cache]
  tags:
    - $RUNNER_TEST
  script:
    - *poetry-install
    - poetry run poe types

bandit:
  stage: test
  image: $IMAGE_PYTHON
  only:
    changes:
      - .gitlab-ci.yml
      - "**/*.py"
  cache: [*poetry-cache]
  tags:
    - $RUNNER_TEST
  script:
    - *poetry-install
    - poetry run poe bandit

pytest:
  stage: test
  image: python:${PY_VERSION}
  parallel:
    matrix:
      - PY_VERSION: ["3.11", "3.10", "3.9"]
  only:
    changes:
      - .gitlab-ci.yml
      - pyproject.toml
      - poetry.lock
      - "**/*.py"
  cache: [*poetry-cache]
  tags:
    - $RUNNER_TEST
  script:
    - *poetry-install
    - poetry run poe cov
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

variables:
  IMAGE_PYTHON: python:3.10
  RUNNER_TEST: docker
  RUNNER_BUILD: docker
  {% if use_docker -%}
  DOCKER_REGISTRY_LOGIN: docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
  DOCKER_REGISTRY_LOGOUT: docker logout $DOCKER_REGISTRY
  DOCKER_IMAGE_NAME: $DOCKER_REGISTRY/$DOCKER_NAMESPACE/$CI_PROJECT_NAME

.docker-build: &docker-build
  - $DOCKER_REGISTRY_LOGIN
  - docker build --pull --tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA .
  - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
  - $DOCKER_REGISTRY_LOGOUT

.docker-publish: &docker-publish
  - $DOCKER_REGISTRY_LOGIN
  - docker pull $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA
  - docker tag $DOCKER_IMAGE_NAME:$CI_COMMIT_SHA $DOCKER_IMAGE_NAME:$DOCKER_TAG
  - docker push $DOCKER_IMAGE_NAME:$DOCKER_TAG
  - $DOCKER_REGISTRY_LOGOUT

build-docker:
  stage: build
  image: docker:dind
  cache: []
  tags:
    - $RUNNER_BUILD
  script:
    - *docker-build
  except:
    - tags

publish-docker-edge:
  stage: publish
  image: docker:dind
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: edge
  cache: []
  tags:
    - $RUNNER_BUILD
  script:
    - *docker-publish
  only:
    - main

publish-docker-release:
  stage: publish
  image: docker:dind
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: $CI_COMMIT_TAG
  cache: []
  tags:
    - $RUNNER_BUILD
  script:
    - *docker-publish
  only:
    - tags

publish-docker-latest:
  stage: publish
  image: docker:dind
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: latest
  cache: []
  tags:
    - $RUNNER_BUILD
  script:
    - *docker-publish
  only:
    - tags
{% endif -%}
